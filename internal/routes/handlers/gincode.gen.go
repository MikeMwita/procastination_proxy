// Package docs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package handlers

import (
	"fmt"
	"github.com/MikeMwita/procastination_proxy"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Block a domain
	// (POST /admin/block/{domain})
	PostAdminBlockDomain(c *gin.Context, domain string)
	// Get the current blocklist
	// (GET /admin/blocklist)
	GetAdminBlocklist(c *gin.Context)
	// Unblock a domain
	// (POST /admin/unblock/{domain})
	PostAdminUnblockDomain(c *gin.Context, domain string)
	// Remove a domain from the user's blocklist
	// (DELETE /user/blocklist)
	DeleteUserBlocklist(c *gin.Context, params docs.DeleteUserBlocklistParams)
	// Get the user's blocklist
	// (GET /user/blocklist)
	GetUserBlocklist(c *gin.Context)
	// Add a domain to the user's blocklist
	// (POST /user/blocklist)
	PostUserBlocklist(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAdminBlockDomain operation middleware
func (siw *ServerInterfaceWrapper) PostAdminBlockDomain(c *gin.Context) {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Param("domain"), &domain)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminBlockDomain(c, domain)
}

// GetAdminBlocklist operation middleware
func (siw *ServerInterfaceWrapper) GetAdminBlocklist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdminBlocklist(c)
}

// PostAdminUnblockDomain operation middleware
func (siw *ServerInterfaceWrapper) PostAdminUnblockDomain(c *gin.Context) {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Param("domain"), &domain)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAdminUnblockDomain(c, domain)
}

// DeleteUserBlocklist operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserBlocklist(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params docs.DeleteUserBlocklistParams

	// ------------- Required query parameter "domain" -------------

	if paramValue := c.Query("domain"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument domain is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "domain", c.Request.URL.Query(), &params.Domain)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUserBlocklist(c, params)
}

// GetUserBlocklist operation middleware
func (siw *ServerInterfaceWrapper) GetUserBlocklist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserBlocklist(c)
}

// PostUserBlocklist operation middleware
func (siw *ServerInterfaceWrapper) PostUserBlocklist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserBlocklist(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/admin/block/:domain", wrapper.PostAdminBlockDomain)
	router.GET(options.BaseURL+"/admin/blocklist", wrapper.GetAdminBlocklist)
	router.POST(options.BaseURL+"/admin/unblock/:domain", wrapper.PostAdminUnblockDomain)
	router.DELETE(options.BaseURL+"/user/blocklist", wrapper.DeleteUserBlocklist)
	router.GET(options.BaseURL+"/user/blocklist", wrapper.GetUserBlocklist)
	router.POST(options.BaseURL+"/user/blocklist", wrapper.PostUserBlocklist)
}
