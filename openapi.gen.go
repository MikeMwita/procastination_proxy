// Package docs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package docs

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// DeleteUserBlocklistParams defines parameters for DeleteUserBlocklist.
type DeleteUserBlocklistParams struct {
	// Domain The domain to be removed from the blocklist.
	Domain string `form:"domain" json:"domain"`
}

// PostUserBlocklistJSONBody defines parameters for PostUserBlocklist.
type PostUserBlocklistJSONBody struct {
	Domain string `json:"domain"`
}

// PostUserBlocklistJSONRequestBody defines body for PostUserBlocklist for application/json ContentType.
type PostUserBlocklistJSONRequestBody PostUserBlocklistJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAdminBlockDomain request
	PostAdminBlockDomain(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminBlocklist request
	GetAdminBlocklist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminUnblockDomain request
	PostAdminUnblockDomain(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserBlocklist request
	DeleteUserBlocklist(ctx context.Context, params *DeleteUserBlocklistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBlocklist request
	GetUserBlocklist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserBlocklist request with any body
	PostUserBlocklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserBlocklist(ctx context.Context, body PostUserBlocklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAdminBlockDomain(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminBlockDomainRequest(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminBlocklist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminBlocklistRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminUnblockDomain(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminUnblockDomainRequest(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserBlocklist(ctx context.Context, params *DeleteUserBlocklistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserBlocklistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBlocklist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBlocklistRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserBlocklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserBlocklistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserBlocklist(ctx context.Context, body PostUserBlocklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserBlocklistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAdminBlockDomainRequest generates requests for PostAdminBlockDomain
func NewPostAdminBlockDomainRequest(server string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/block/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminBlocklistRequest generates requests for GetAdminBlocklist
func NewGetAdminBlocklistRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/blocklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminUnblockDomainRequest generates requests for PostAdminUnblockDomain
func NewPostAdminUnblockDomainRequest(server string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/unblock/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserBlocklistRequest generates requests for DeleteUserBlocklist
func NewDeleteUserBlocklistRequest(server string, params *DeleteUserBlocklistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/blocklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain", runtime.ParamLocationQuery, params.Domain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBlocklistRequest generates requests for GetUserBlocklist
func NewGetUserBlocklistRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/blocklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserBlocklistRequest calls the generic PostUserBlocklist builder with application/json body
func NewPostUserBlocklistRequest(server string, body PostUserBlocklistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserBlocklistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserBlocklistRequestWithBody generates requests for PostUserBlocklist with any type of body
func NewPostUserBlocklistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/blocklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAdminBlockDomain request
	PostAdminBlockDomainWithResponse(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*PostAdminBlockDomainResponse, error)

	// GetAdminBlocklist request
	GetAdminBlocklistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminBlocklistResponse, error)

	// PostAdminUnblockDomain request
	PostAdminUnblockDomainWithResponse(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*PostAdminUnblockDomainResponse, error)

	// DeleteUserBlocklist request
	DeleteUserBlocklistWithResponse(ctx context.Context, params *DeleteUserBlocklistParams, reqEditors ...RequestEditorFn) (*DeleteUserBlocklistResponse, error)

	// GetUserBlocklist request
	GetUserBlocklistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserBlocklistResponse, error)

	// PostUserBlocklist request with any body
	PostUserBlocklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserBlocklistResponse, error)

	PostUserBlocklistWithResponse(ctx context.Context, body PostUserBlocklistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserBlocklistResponse, error)
}

type PostAdminBlockDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminBlockDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminBlockDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminBlocklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetAdminBlocklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminBlocklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminUnblockDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminUnblockDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminUnblockDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserBlocklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserBlocklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserBlocklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBlocklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetUserBlocklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBlocklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserBlocklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserBlocklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserBlocklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAdminBlockDomainWithResponse request returning *PostAdminBlockDomainResponse
func (c *ClientWithResponses) PostAdminBlockDomainWithResponse(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*PostAdminBlockDomainResponse, error) {
	rsp, err := c.PostAdminBlockDomain(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminBlockDomainResponse(rsp)
}

// GetAdminBlocklistWithResponse request returning *GetAdminBlocklistResponse
func (c *ClientWithResponses) GetAdminBlocklistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminBlocklistResponse, error) {
	rsp, err := c.GetAdminBlocklist(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminBlocklistResponse(rsp)
}

// PostAdminUnblockDomainWithResponse request returning *PostAdminUnblockDomainResponse
func (c *ClientWithResponses) PostAdminUnblockDomainWithResponse(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*PostAdminUnblockDomainResponse, error) {
	rsp, err := c.PostAdminUnblockDomain(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminUnblockDomainResponse(rsp)
}

// DeleteUserBlocklistWithResponse request returning *DeleteUserBlocklistResponse
func (c *ClientWithResponses) DeleteUserBlocklistWithResponse(ctx context.Context, params *DeleteUserBlocklistParams, reqEditors ...RequestEditorFn) (*DeleteUserBlocklistResponse, error) {
	rsp, err := c.DeleteUserBlocklist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserBlocklistResponse(rsp)
}

// GetUserBlocklistWithResponse request returning *GetUserBlocklistResponse
func (c *ClientWithResponses) GetUserBlocklistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserBlocklistResponse, error) {
	rsp, err := c.GetUserBlocklist(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBlocklistResponse(rsp)
}

// PostUserBlocklistWithBodyWithResponse request with arbitrary body returning *PostUserBlocklistResponse
func (c *ClientWithResponses) PostUserBlocklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserBlocklistResponse, error) {
	rsp, err := c.PostUserBlocklistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserBlocklistResponse(rsp)
}

func (c *ClientWithResponses) PostUserBlocklistWithResponse(ctx context.Context, body PostUserBlocklistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserBlocklistResponse, error) {
	rsp, err := c.PostUserBlocklist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserBlocklistResponse(rsp)
}

// ParsePostAdminBlockDomainResponse parses an HTTP response from a PostAdminBlockDomainWithResponse call
func ParsePostAdminBlockDomainResponse(rsp *http.Response) (*PostAdminBlockDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminBlockDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminBlocklistResponse parses an HTTP response from a GetAdminBlocklistWithResponse call
func ParseGetAdminBlocklistResponse(rsp *http.Response) (*GetAdminBlocklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminBlocklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminUnblockDomainResponse parses an HTTP response from a PostAdminUnblockDomainWithResponse call
func ParsePostAdminUnblockDomainResponse(rsp *http.Response) (*PostAdminUnblockDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminUnblockDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserBlocklistResponse parses an HTTP response from a DeleteUserBlocklistWithResponse call
func ParseDeleteUserBlocklistResponse(rsp *http.Response) (*DeleteUserBlocklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserBlocklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserBlocklistResponse parses an HTTP response from a GetUserBlocklistWithResponse call
func ParseGetUserBlocklistResponse(rsp *http.Response) (*GetUserBlocklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBlocklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserBlocklistResponse parses an HTTP response from a PostUserBlocklistWithResponse call
func ParsePostUserBlocklistResponse(rsp *http.Response) (*PostUserBlocklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserBlocklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
